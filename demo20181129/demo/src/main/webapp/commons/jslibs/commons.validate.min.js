function showTips(tips,foucusId)
{
	if(tips){art.dialog.alert(tips);}
	if(foucusId){$("#"+foucusId).focus();}
}

//----------------------字符串start-------------------------
var StrVal = {
	/**
     * 判断字符串是否为空
     * @param str 传入的字符串
     * @returns {}
     */
    isEmpty:function(str,tips,foucusId){
    	//alert(str+"==="+tips+"----"+foucusId);
        if(str != null && str.length > 0){
            return true;
        }else{
        	showTips(tips,foucusId);
            return false;
        }
    },
    //空字符串  
    isEmptyJust:function (str) {  
        if ((str == null) || (str.toString().replace(/\s+/g, "") == "")) {  
            return true;  
        } else {  
            return false;  
        }  
    },
    isNotEmpty:function(str) {  
        if ((str == null) || (str.toString().replace(/\s+/g, "") == "")) {  
            return false;  
        } else {  
            return true;  
        }  
    }, 
    /**
     * 判断两个字符串子否相同
     * @param str1
     * @param str2
     * @returns {Boolean}
     */
    isEquals:function(str1,str2){
        if(str1==str2){
            return true;
        }else{
            return false;
        }
    },
    /**
     * 忽略大小写判断字符串是否相同
     * @param str1
     * @param str2
     * @returns {Boolean}
     */
    isEqualsIgnorecase:function(str1,str2){
        if(str1.toUpperCase() == str2.toUpperCase()){
            return true;
        }else{
            return false;
        }
    },
    /**
     * 判断是否是数字
     * @param value
     * @returns {Boolean}
     */
    isNum:function (value){
        if( value != null && value.length>0 && isNaN(value) == false){
            return true;
        }else{
            return false;
        }
    },
    /**
     * 判断是否是中文
     * @param str
     * @returns {Boolean}
     */
    isChine:function(str){
        var reg = /^([u4E00-u9FA5]|[uFE30-uFFA0])*$/;
        if(reg.test(str)){
            return false;
        }
        return true;
    },
	// 字符串固定长度  
	isLength:function(str, length) {  
	    if (isEmptyJust(str)) {  
	        return true;  
	    }  
	    var len = str.length;  
	    if (len != length) {  
	        return false;  
	    } else {  
	        return true;  
	    }  
	}, 
	// 数字最值(最小值，最大值，必须输入)  
	isNumRange:function(str, minNum, maxNum) {  
	    if (isEmptyJust(str)) {  
	        return true;  
	    }  
	    var num = parseFloat(str);  
	    if (!isEmptyJust(minNum) && num < minNum) {  
	        return false;  
	    } else if (!isEmptyJust(maxNum) && num > maxNum) {  
	        return false;  
	    } else {  
	        return true;  
	    }  
	},  
	  
	// 字符串最大长度  
	isMaxLength:function(str, maxLength,tips,foucusId) {  
	    if (StrVal.isEmptyJust(str)) {  
	        return true;  
	    }  
	    var len = str.length;  
	    if (len > maxLength) { 
	    	showTips(tips,foucusId);
	        return false;  
	    } else {  
	        return true;  
	    }  
	},  
	  
	// 字符串最小长度  
	isMinLength:function(str, minLength) {  
	    if (isEmptyJust(str)) {  
	        return true;  
	    }  
	    var len = str.length;  
	    if (len < minLength) {  
	        return false;  
	    } else {  
	        return true;  
	    }  
	},  
	/**
	 * 判断证监号
	 * @param sId
	 * @returns
	 */
	isCardID:function(sId) {  
	    if (isEmptyJust(sId)) {  
	        return true;  
	    }  
	    var iSum = 0;  
	    if (!/^\d{17}(\d|x)$/i.test(sId))  
	        return "你输入的身份证长度或格式错误";  
	    sId = sId.replace(/x$/i, "a");  
	    if (aCity[parseInt(sId.substr(0, 2))] == null)  
	        return "你的身份证地区非法";  
	    sBirthday = sId.substr(6, 4) + "-" + Number(sId.substr(10, 2)) + "-"  
	            + Number(sId.substr(12, 2));  
	    var d = new Date(sBirthday.replace(/-/g, "/"));  
	    if (sBirthday != (d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d  
	            .getDate()))  
	        return "身份证上的出生日期非法";  
	    for ( var i = 17; i >= 0; i--)  
	        iSum += (Math.pow(2, i) % 11) * parseInt(sId.charAt(17 - i), 11);  
	    if (iSum % 11 != 1)  
	        return "你输入的身份证号非法";  
	    return true;// aCity[parseInt(sId.substr(0,2))]+","+sBirthday+","+(sId.substr(16,1)%2?"男":"女")  
	} 	
};

//----------------------字符串end-------------------------


//----------------------数字Start-------------------------
var NumValidates = {
	//小数精确度（maxL：整数部分长度，maxF：小数部分长度）  
		isMaxLengthForDouble:function(str, maxL, maxF) {  
	    if (isEmptyJust(str)) {  
	        return true;  
	    }  
	    var vals = str.split(".");  
	  
	    if ((vals[0].length > maxL) || (vals[1].length > maxF)) {  
	        return false;  
	    } else {  
	        return true;  
	    }  
	}	
};

//----------------------数字end-------------------------



//----------------------日期Start-------------------------
var DateVal = {
	/** 
	 * 日期校验正则表达式 
	 * @param str 
	 * @returns {Boolean} 
	 */  
	isdate:function(str){  
	    var reg = /^((((((0[48])|([13579][26])|([2468][048]))00)|([0-9][0-9]((0[48])|([13579][26])|([2468][048]))))-02-29)|(((000[1-9])|(00[1-9][0-9])|(0[1-9][0-9][0-9])|([1-9][0-9][0-9][0-9]))-((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30))|(((0[1-9])|(1[0-2]))-((0[1-9])|(1[0-9])|(2[0-8]))))))$/i;  
	    if (reg.test(str)) return true;  
	    return false;  
	}, 
	// 短时间，形如 (13:04:06)  
	isTime:function(str) {  
	    if (isEmptyJust(str)) {  
	        return true;  
	    }  
	    var a = str.match(/^(\d{1,2})(:)?(\d{1,2})\2(\d{1,2})$/);  
	    if (a == null) {  
	        return false;  
	    }  
	    if (a[1] > 24 || a[3] > 60 || a[4] > 60) {  
	        return false;  
	    }  
	    return true;  
	},  
	  
	//短时间，形如 (13:04)  
	isTimeHM:function(str) {  
	    if (isEmptyJust(str)) {  
	        return false;  
	    }  
	    var a = str.match(/^(\d{1,2})(:)?(\d{1,2})$/);  
	    if (a == null) {  
	        alert("hm"+a);  
	        return false;  
	    }  
	    if (a[1] > 24 || a[3] > 60) {  
	        alert("hm"+a[1]);  
	        alert("hm"+a[3]);  
	        return false;  
	    }  
	    return true;  
	},  
	  
	// 短日期，形如 (2003-12-05)  
	isDate:function(str) {  
	    if (isEmptyJust(str)) {  
	        return true;  
	    }  
	    var r = str.match(/^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2})$/);  
	    if (r == null)  
	        return false;  
	    var d = new Date(r[1], r[3] - 1, r[4]);  
	    return (d.getFullYear() == r[1] && (d.getMonth() + 1) == r[3] && d  
	            .getDate() == r[4]);  
	},  
	  
	// 长时间，形如 (2003-12-05 13:04:06)  
	isDateTime:function(str) {  
	    if (isEmptyJust(str)) {  
	        return true;  
	    }  
	    var reg = /^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2}) (\d{1,2}):(\d{1,2}):(\d{1,2})$/;  
	    var r = str.match(reg);  
	    if (r == null)  
	        return false;  
	    var d = new Date(r[1], r[3] - 1, r[4], r[5], r[6], r[7]);  
	    return (d.getFullYear() == r[1] && (d.getMonth() + 1) == r[3]  
	            && d.getDate() == r[4] && d.getHours() == r[5]  
	            && d.getMinutes() == r[6] && d.getSeconds() == r[7]);  
	}, 
	//最小日期  
	isMinDate:function(date, minDate) {  
	    if (isEmptyJust(date)) {  
	        return true;  
	    }  
	    var r1 = date.match(/^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2})$/);  
	    var d1 = new Date(r1[1], r1[3] - 1, r1[4]);  
	    var d2 = new Date();  
	    d2 = new Date(d2.getFullYear(), d2.getMonth(), d2.getDate());  
	    if (minDate != "now") {  
	        var r2 = minDate.match(/^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2})$/);  
	        d2 = new Date(r2[1], r2[3] - 1, r2[4]);  
	    }  
	  
	    var t1 = d1.getTime();  
	    var t2 = d2.getTime();  
	  
	    if (t1 < t2) {  
	        return false;  
	    } else {  
	        return true;  
	    }  
	  
	},  
	  
	// 最大日期  
	isMaxDate:function(date, maxDate) {  
	    if (isEmptyJust(date)) {  
	        return true;  
	    }  
	    var r1 = date.match(/^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2})$/);  
	    var d1 = new Date(r1[1], r1[3] - 1, r1[4]);  
	    var d2 = new Date();  
	    d2 = new Date(d2.getFullYear(), d2.getMonth(), d2.getDate());  
	    if (maxDate != "now") {  
	        var r2 = maxDate.match(/^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2})$/);  
	        d2 = new Date(r2[1], r2[3] - 1, r2[4]);  
	    }  
	  
	    var t1 = d1.getTime();  
	    var t2 = d2.getTime();  
	  
	    if (t1 > t2) {  
	        return false;  
	    } else {  
	        return true;  
	    }  
	},  
	//开始时间 - 结束时间 yyyy-mm-dd  
	check:function(startTime, endTime) {  
	    if (startTime.length > 0 && endTime.length > 0) {  
	        var startTmp = startTime.split("-");  
	        var endTmp = endTime.split("-");  
	        var sd = new Date(startTmp[0], startTmp[1], startTmp[2]);  
	        var ed = new Date(endTmp[0], endTmp[1], endTmp[2]);  
	        if (sd.getTime() > ed.getTime()) {  
	            return false;  
	        }  
	    }  
	    return true;  
	},  
	  
	// 格式 yyyy-MM  
	checkTime:function(startTime, endTime) {  
	    if (startTime.length > 0 && endTime.length > 0) {  
	        startTime = startTime + "/01";  
	        endTime = endTime + "/01";  
	        var startTimeTmp = startTime.replace(/-/g, "/");  
	        var endTimeTmp = endTime.replace(/-/g, "/");  
	        var d1 = new Date(Date.parse(startTimeTmp));  
	        var d2 = new Date(Date.parse(endTimeTmp));  
	        if (d1 > d2) {  
	            return false;  
	        }  
	    }  
	    return true;  
	},  
	  
	// 格式 HH:mm:ss  
	compareTime:function(interviewDate, startTime, endTime) {  
	    var startDate = interviewDate + " " + startTime;  
	    var endDate = interviewDate + " " + endTime;  
	    if (startDate.length > 0 && endDate.length > 0) {  
	        var startDateTemp = startDate.split(" ");  
	        var endDateTemp = endDate.split(" ");  
	        var arrStartDate = startDateTemp[0].split("-");  
	        var arrEndDate = endDateTemp[0].split("-");  
	        var arrStartTime = startDateTemp[1].split(":");  
	        var arrEndTime = endDateTemp[1].split(":");  
	        var allStartDate = new Date(arrStartDate[0], arrStartDate[1],arrStartDate[2], arrStartTime[0], arrStartTime[1],arrStartTime[2]);  
	        var allEndDate = new Date(arrEndDate[0], arrEndDate[1], arrEndDate[2],arrEndTime[0], arrEndTime[1], arrEndTime[2]);  
	  
	        if (allStartDate.getTime() >= allEndDate.getTime()) {  
	            return false;  
	        } else {  
	            return true;  
	        }  
	    } else {  
	        alert("时间不能为空");  
	        return false;  
	    }  
	}, 
	/** 
	 * 比较开始时间和结束时间(yyyy-MM-dd) 
	 * @param currDate 
	 * @param inputDate 
	 * @returns {Boolean} 
	 */  
	judegeDate:function(currDate,inputDate){  
	    if(currDate.length>0 && inputDate.length>0){       
	        var startTmp=currDate.split("-");    
	        var endTmp=inputDate.split("-");    
	        var sd=new Date(startTmp[0],startTmp[1],startTmp[2]);    
	        var ed=new Date(endTmp[0],endTmp[1],endTmp[2]);    
	        if(sd.getTime() > ed.getTime()){     
	            return false;       
	        }       
	    }       
	    return true;       
	}		
}

//----------------------日期end-------------------------
var OtherVal = {
	/** 
	 * 判断数组是否有重复元素 
	 *  
	 * @param elementArray 
	 * @returns {Boolean} 
	 */  
	isDuplicate:function(elementArray) {  
	    var nary = elementArray.sort();  
	    for ( var i = 0; i < nary.length; i++) {  
	        if (nary[i] == nary[i + 1]) {  
	            return true;  
	        }  
	    }  
	    return false;  
	},  
	  
	// 是否在数组内  
	in_array:function(needle, haystack) {  
	    if (typeof needle == 'string' || typeof needle == 'number') {  
	        for ( var i in haystack) {  
	            if (haystack[i] == needle) {  
	                return true;  
	            }  
	        }  
	    }  
	    return false;  
	}		
}

