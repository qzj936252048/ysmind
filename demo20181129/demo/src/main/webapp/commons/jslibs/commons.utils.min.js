//----------------------字符串start-------------------------
var StrUtils = {
    
    /**
     * 去除undefined
     * @param val
     * @returns
     */
    dealUndefined:function(val)
    {
    	if(!val || undefined==val || "undefined"==val){
    		return "";
    	}
    	else
    	{
    		return val;
    	}
    },

    /** 
     * 去掉字符串左边空格 
     *  
     * @param str 
     * @returns 
     */  
    ltrim:function(str) {  
        var pattern = new RegExp("^[\\s]+", "gi");  
        return str.replace(pattern, "");  
    },  
      
    /** 
     * 去掉字符串右边空格 
     *  
     * @param str 
     * @returns 
     */  
    rtrim:function(str) {  
        var pattern = new RegExp("[\\s]+$", "gi");  
        return str.replace(pattern, "");  
    },  
      
    /** 
     * 去掉字符串左右空格 
     *  
     * @param str 
     * @returns 
     */  
    trim:function(str) {  
        return rtrim(ltrim(str));  
    },

    /** 
     * 去掉字符串最后一个逗号 
     * @param str 
     * @returns 
     */  
    delComma:function(str)  
    {  
        if(str.charAt(str.length-1) == ",")  
        {  
            str = str.substring(0, str.length-1);  
        }  
        return str;  
    },
    //字符串截取  ，用点点缩写
    spliceStr:function(str) {  
        if (!isEmpty(str)) {  
            if (str.length > 5) {  
                str = str.substr(0, 5) + "..";  
                return str;  
            }  
        } else {  
            return "";  
        }  
    } 
};







//----------------------字符串end-------------------------


//----------------------数字Start-------------------------
/**  数字格式通用工具
 *  @Authors: almtalmt
 *  @date 2013-10-18
 *
 */
var NumberUtils = {
	//函数说明：给数字加千分位显示  
	//参数说明：num   需要加千分位的数字
	numToThousandsSeparator: function (num) {
		//如果传进来的值不是数字，则原值返回
		if (!Number(num) || num < 1000) {
			return num;
		}
		num = num + "";
		var re = /(-?\d+)(\d{3})/;
		//正则判断
		while (re.test(num)) {
			//符合条件则进行替换
			num = num.replace(re, "$1,$2");
		}
		return num;
	},
	/**
	 * 把字符串转成数字
	 * val	必需。要被解析的字符串。
	 * radix	可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。
	 * 如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。
	 * 如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN。
	 */
	getIntValue:function(val)
	{
		if(val && ""!=val)
		{
			if(!radix)
			{
				radix = 10;
			}
			return parseInt(val,radix);
		}
		return 0;
	},
	//计算两个字符串数字的和
	calculateIntValue:function(val1,val2)
	{
		if(val1 && val2)
		{
			return allVal = getIntValue(val1)+getIntValue(val2);
		}
		return 0;
	},
	/**
	 * parseFloat 是全局函数，不属于任何对象。
	 * parseFloat 将它的字符串参数解析成为浮点数并返回。如果在解析过程中遇到了正负号（+ 或 -）、数字 (0-9)、小数点，或者科学记数法中的指数（e 或 E）以外的字符，则它会忽略该字符以及之后的所有字符，返回当前已经解析到的浮点数。同时参数字符串首位的空白符会被忽略。
	 * 如果参数字符串的第一个字符不能被解析成为数字，则 parseFloat 返回 NaN。
	 * 提示：您可以通过调用 isNaN 函数来判断 parseFloat 的返回结果是否是 NaN。如果让 NaN 作为了任意数学运算的操作数，则运算结果必定也是 NaN。
	 */
	getFloatValue:function(val)
	{
		if(val && ""!=val)
		{
			return parseFloat(val);
		}
		return 0.0;
	},
	/**
	 * 计算两个浮点型数字的值，并注明保留多少位小数
	 * toFixed() 方法可把 Number 四舍五入为指定小数位数的数字。
	 * 语法NumberObject.toFixed(num)参数描述num必需。规定小数的位数，是 0 ~ 20 之间的值，包括 0 和 20，有些实现可以支持更大的数值范围。如果省略了该参数，将用 0 代替。返回值
	 * 返回 NumberObject 的字符串表示，不采用指数计数法，小数点后有固定的 num 位数字。如果必要，该数字会被舍入，也可以用 0 补足，以便它达到指定的长度。如果 num 大于 le+21，则该方法只调用 NumberObject.toString()，返回采用指数计数法表示的字符串。
	 */
	calculateFloatValue(val1,val2,num)
	{
		if(val1 && val2)
		{
			if(!num)
			{
				num = 0;
			}
			var allVal = getFloatValue(val1)+getFloatValue(val2);
			return allVal.toFixed(num);
		}
		return 0.0;
	}
};
//----------------------数字end-------------------------



//----------------------日期Start-------------------------
/**
 *  日期处理工具类
 *  @Authors: almtalmt
 *  @date 2013-10-18
 *
 */
var DateUtils = {
	//根据年、月、日、时、分、秒组成一个日期
	getDateTime:function(year,month,day,hour,minute,second){  
        var date = null;  
        if((year==null && month==null && day==null  
                && hour == null && minute == null && second == null)){  
            date =  new Date();  
        }else if(year != null && month != null && day != null  
                    && hour == null && minute == null && second == null){  
            date = new Date(year,month-1,day);  
        }else if(year != null && month != null && day != null  
                    && hour != null && minute != null && second != null){  
            date = new Date(year,month-1,day,hour,minute,second);             
        }  
        return date;              
    },
    /** 
     * getYear方法取得年值 
     *  
     */  
    getYear:function(){  
        var year = null;  
        var dateTime = this.getDateTime();                        
        if(dateTime != null){  
            year = dateTime.getFullYear();  
        }else{  
            year = this.curDateTime.getFullYear();  
        }         
        return year;  
    },  
      
    /** 
     * getMonth方法取得月值 
     *  
     */  
    getMonth:function(){  
        var month = null;  
        var dateTime = this.getDateTime();  
        if(dateTime != null){  
            month = dateTime.getMonth() + 1;          
        }else{  
            month = this.curDateTime.getMonth() + 1;      
        }  
        return month;  
    }, 
      
    /** 
     * getDay方法取得日值 
     *  
     */  
    getDay:function(){  
        var day = null;  
        var dateTime = this.getDateTime();  
        if(dateTime != null){  
            day = dateTime.getDate();  
        }else{  
            day = this.curDateTime.getDate();     
        }  
        return day;  
    }, 
      
    /** 
     * getHour方法取得24进制小时 
     *  
     */  
    getHour:function(){  
        var hour = null;  
        var dateTime = this.getDateTime();  
        if(dateTime != null){  
            hour = dateTime.getHours();  
        }else{  
            hour = this.curDateTime.getHours();   
        }  
        return hour;  
    },    
      
    /** 
     * getMinute方法取得分值 
     *  
     */  
    getMinute:function(){  
        var minute = null;  
        var dateTime = this.getDateTime();  
        if(dateTime != null){  
            minute = dateTime.getMinutes();  
        }else{  
            minute = this.curDateTime.getMinutes();  
        }  
        return minute;        
    }, 
      
    /** 
     * getSecond方法取得秒值 
     *  
     */  
    getSecond:function(){  
        var second = null;  
        var dateTime = this.getDateTime();  
        if(dateTime != null){  
            second = dateTime.getSeconds();  
        }else{  
            second = this.curDateTime.getSeconds();  
        }  
        return second;  
    },  
      
      
    /** 
     * getDateRange方法用于得到一天之内的时刻范围 
     *  
     * @return range ["凌晨"|"上午"|"中午"|"下午"|"晚上"] 
     */  
    getDateRange:function(){  
        var hour = window.parseInt(this.getHour());  
        var range = "凌晨"  
        if(hour >= 6 && hour < 11){  
            range = "早晨";  
        }else if(hour >=11 && hour < 14){  
            range = "中午";  
        }else if(hour >=14 && hour <= 18){  
            range = "下午";  
        }else if(hour >18 && hour < 24){  
            range = "晚上";  
        }  
        return range;  
    },    
    /** 
     * get12PatternHour方法用于得到12进制小时值 
     *  
     */  
    get12PatternHour:function(){  
        return hour>12?(hour+12-24):hour;  
    },  
    /** 
     * isLeapYear方法用于判断是否为闰年 
     * <p> 
     * 闰年算法说明： 
     * 能被4整除并且不能被100整除或者能被400整除的年份是闰年 
     */  
    isLeapYear:function(){  
        var flag = false;  
        if((this.getYear() % 4 == 0 && this.getYear() % 100 !=0)  
                || (this.getYear() % 400 == 0)){  
            flag = true;  
        }         
        return flag;  
    },  
      
  
    /** 
     * getMaxDaysByMonth方法根据月份获取该月的最大天数 
     *   
     */  
    getMaxDaysByMonth:function(){  
        var days = 31;  
        var month = this.getMonth();  
        switch(month){  
            case 2:  
                if(this.isLeapYear()){  
                    days = 29;  
                }else{  
                    days = 28;  
                }  
                break;  
            case 4:  
            case 6:  
            case 9:  
            case 11:  
                days = 30;  
                break;  
            default:  
                break;  
        }  
        return days;  
    } , 
  
	
	/**
     * 方法作用：【取传入日期是星期几】
     * 使用方法：dateUtil.nowFewWeeks(new Date());
     * @param date{date} 传入日期类型
     * @returns {星期四，...}
     */
    nowFewWeeks:function(date){
        if(date instanceof Date){
            var dayNames = new Array("星期天","星期一","星期二","星期三","星期四","星期五","星期六");
            return dayNames[date.getDay()];
        } else{
            return "Param error,date type!";
        }
    },
    /**
     * 方法作用：【字符串转换成日期】
     * 使用方法：dateUtil.strTurnDate("2010-01-01");
     * @param str {String}字符串格式的日期，传入格式：yyyy-mm-dd(2015-01-31)
     * @return {Date}由字符串转换成的日期
     */
    strTurnDate:function(str){
        var   re   =   /^(\d{4})\S(\d{1,2})\S(\d{1,2})$/;
        var   dt;
        if   (re.test(str)){
            dt   =   new   Date(RegExp.$1,RegExp.$2   -   1,RegExp.$3);
        }
        return dt;
    },
    /**
     * 方法作用：【计算2个日期之间的天数】
     * 传入格式：yyyy-mm-dd(2015-01-31)
     * 使用方法：dateUtil.dayMinus(startDate,endDate);
     * @startDate {Date}起始日期
     * @endDate {Date}结束日期
     * @return endDate - startDate的天数差
     */
    dayMinus:function(startDate, endDate){
        if(startDate instanceof Date && endDate instanceof Date){
            var days = Math.floor((endDate-startDate)/(1000 * 60 * 60 * 24));
            return days;
        }else{
            return "Param error,date type!";
        }
    },
	/**   
	 * 得到日期在一年当中的周数
	 */
	getISOYearWeek: function(date) {
		var commericalyear = this.getCommerialYear(date);
		var date2 = this.getYearFirstWeekDate(commericalyear);
		var day1 = date.getDay();
		if (day1 == 0) day1 = 7;
		var day2 = date2.getDay();
		if (day2 == 0) day2 = 7;
		var d = Math.round((date.getTime() - date2.getTime() + (day2 - day1) * (24 * 60 * 60 * 1000)) / 86400000);
		return Math.floor(d / 7) + 1;
	},
	/**   
	 * 得到一年之中的第一周的日期
	 */
	getYearFirstWeekDate: function(commericalyear) {
		var yearfirstdaydate = new Date(commericalyear, 0, 1);
		var daynum = yearfirstdaydate.getDay();
		var monthday = yearfirstdaydate.getDate();
		if (daynum == 0) daynum = 7;
		if (daynum <= 4) {
			return new Date(yearfirstdaydate.getFullYear(), yearfirstdaydate.getMonth(), monthday + 1 - daynum);
		} else {
			return new Date(yearfirstdaydate.getFullYear(), yearfirstdaydate.getMonth(), monthday + 8 - daynum);
		}
	},
	/**   
	 * 获取当前日期的年份
	 */
	getCommerialYear: function(date) {
		var daynum = date.getDay();
		var monthday = date.getDate();
		if (daynum == 0) daynum = 7;
		var thisthurdaydate = new Date(date.getFullYear(), date.getMonth(), monthday + 4 - daynum);
		return thisthurdaydate.getFullYear();
	},
	/**   
	 * 获取周一
	 */
	getWeekStartDate: function(date) {
		var nowDayOfWeek = (date.getDay() == 0) ? 6 : date.getDay() - 1;
		var t = new Date(date); //复制并操作新对象，避免改动原对象	 
		//t.setDate(t.getDate() - nowDayOfWeek);
		t.setTime(t.getTime() - nowDayOfWeek * 86400000);
		return t;
	},
	/**   
	 * 获取周日。本周一+6天 
	 */
	getWeekEndDate: function(date) {
		var t = new Date(date); //复制并操作新对象，避免改动原对象	 
		//t.setDate(this.getWeekStartDate(date).getDate() + 6); //date来计算会有出错的情况出现比如10.1这一周
		t.setTime(this.getWeekStartDate(date).getTime() + 6 * 86400000);
		return t;
	},
	/**
	 * 方法作用：【格式化时间】日期格式化，第一个参数为日期，第二个参数为日期格式化的格式，返回一个格式化后的字符串
	 * 使用方法
	 * 示例：
	 *      使用方式一：
	 *      var now = new Date();
	 *      var nowStr = now.dateFormat("yyyy-MM-dd hh:mm:ss");
	 *      使用方式二：
	 *      new Date().dateFormat("yyyy年MM月dd日");
	 *      new Date().dateFormat("MM/dd/yyyy");
	 *      new Date().dateFormat("yyyyMMdd");
	 *      new Date().dateFormat("yyyy-MM-dd hh:mm:ss");
	 * @param format {date} 传入要格式化的日期类型
	 * @returns {2015-01-31 16:30:00}
	 */
	dateFormat: function(date, format) {
		if(!date)
		{
			date=new Date();
		}
		var o = {
			"M+": date.getMonth() + 1, //month
			"d+": date.getDate(), //day
			"h+": date.getHours(), //hour
			"m+": date.getMinutes(), //minute
			"s+": date.getSeconds(), //second
			"q+": Math.floor((date.getMonth() + 3) / 3), //quarter
			"S": date.getMilliseconds() //millisecond
		};
		if (/(y+)/.test(format)) {
			format = format.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
		}
 
		for (var k in o) {
			if (new RegExp("(" + k + ")").test(format)) {
				format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
			}
		}
		return format;
	},
	
	//获取当前日期的日期时间
	getCurentTime:function () {  
	    var now = new Date();  
	    var year = now.getFullYear(); // 年  
	    var month = now.getMonth() + 1; // 月  
	    var day = now.getDate(); // 日  
	    var hh = now.getHours(); // 时  
	    var mm = now.getMinutes(); // 分  
	    var clock = year + "-";  
	    if (month < 10)  
	        clock += "0";  
	    clock += month + "-";  
	    if (day < 10)  
	        clock += "0";  
	    clock += day + " ";  
	    if (hh < 10)  
	        clock += "0";  
	    clock += hh + ":";  
	    if (mm < 10)  
	        clock += '0';  
	    clock += mm;  
	    return (clock);  
	},  
	
	//获取当前日期的年月
	getCurentYearMonth:function () {  
	    var now = new Date();  
	    var year = now.getFullYear(); // 年  
	    var month = now.getMonth() + 1; // 月  
	    var clock = year + "-";  
	    if (month < 10)  
	        clock += "0";  
	    clock += month;  
	    return (clock);  
	},  

	/** 
	 * 格式化日期 
	 * @param value 
	 * @returns {String} 
	 */  
	formatDate:function (value){  
	    var d = new Date(value);  
	    var mon = d.getMonth() + 1;  
	    var day = d.getDate();  
	    var hours = d.getHours();  
	    var minute = d.getMinutes();  
	    var second = d.getSeconds();  
	    return d.getFullYear() + "-" + (mon >= 10 ? mon : "0" + mon) + "-" + (day >= 10 ? day : "0" + day) + " " + (hours >= 10 ? hours : "0" + hours) + ":" + (minute >= 10 ? minute : "0" + minute) + ":" + (second >= 10 ? second : "0" + second);  
	},
	
	/**   
	 * 判断输入的日期格式是否为 yyyy-mm-dd 或 yyyy-m-d
	 */
	isDate: function (dateString) {
		//判断日期是否为空
		if (dateString.trim() == "") {
			alert("日期为空！请输入格式正确的日期\n\r日期格式：yyyy-mm-dd\n\r例	如：2013-08-08\n\r");
			return false;
		} else {
			dateString = dateString.trim();
		}
		
		//年月日正则表达式
		var r = dateString.match(/^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2})$/);
		if (r == null) {
			alert("请输入格式正确的日期\n\r日期格式：yyyy-mm-dd\n\r例	如：2013-08-08\n\r");
			return false;
		}
		var d = new Date(r[1], r[3] - 1, r[4]);
		var num = (d.getFullYear() == r[1] && (d.getMonth() + 1) == r[3] && d.getDate() == r[4]);
		if (num == 0) {
			alert("请输入格式正确的日期\n\r日期格式：yyyy-mm-dd\n\r例	如：2013-08-08\n\r");
		}
		return (num != 0);
	}
};


//----------------------日期end-------------------------
//----------------------JSON-start-------------------------
var JsonUtils = {
	strToJson:function(str)
	{
		//var obj = eval('(' + str + ')');
		//var obj = str.parseJSON(); //由JSON字符串转换为JSON对象
		//var obj = JSON.parse(str); //由JSON字符串转换为JSON对象
		if(!str)return null;
		return JSON.parse(str);
	},
	jsonToStr:function(json)
	{
		return JSON.stringify(json);//var last=obj.toJSONString(); 
	},
	//从json格式的字符串中得到某个key对应的value
	getValFromStr:function(jsonStr,key){
		if(!jsonStr)return "";
		var json = strToJson(jsonStr); 
        for(var k in json) {
            //遍历对象，k即为key，obj[k]为当前k对应的值
        	if(k==key)
        	{
        		return json[k];
        	}
        }
		
	}
}
//----------------------JSON-end-------------------------
//----------------------数组start-------------------------
//根据数据取得在数组中的索引
function getIndexFromArr(obj){
  for (var i = 0; i < this.length; i++) {
      if (obj == this[i]) {
          return i;
      }
  }
  return -1;
}
//移除数组中的某元素
function removeFromArr(obj) {
  for (var i = 0; i < this.length; i++) {
      if (obj == this[i]) {
          this.splice(i, 1);
          break;
      }
  }
  return this;
}
//判断元素是否在数组中
function containsFromArr(obj) {
  for (var i = 0; i < this.length; i++) {
      if (obj == this[i]) {
          return true;
      }
  }
  return false;
}                   
//----------------------数组end---------------------------

